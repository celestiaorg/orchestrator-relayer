// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qgb/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryAttestationRequestByNonceRequest
type QueryAttestationRequestByNonceRequest struct {
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryAttestationRequestByNonceRequest) Reset()         { *m = QueryAttestationRequestByNonceRequest{} }
func (m *QueryAttestationRequestByNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAttestationRequestByNonceRequest) ProtoMessage()    {}
func (*QueryAttestationRequestByNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{2}
}
func (m *QueryAttestationRequestByNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAttestationRequestByNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAttestationRequestByNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAttestationRequestByNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAttestationRequestByNonceRequest.Merge(m, src)
}
func (m *QueryAttestationRequestByNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAttestationRequestByNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAttestationRequestByNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAttestationRequestByNonceRequest proto.InternalMessageInfo

func (m *QueryAttestationRequestByNonceRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// QueryAttestationRequestByNonceResponse
type QueryAttestationRequestByNonceResponse struct {
	// AttestationRequestI is either a Data Commitment or a Valset.
	// This was decided as part of the universal nonce approach under:
	// https://github.com/celestiaorg/celestia-app/issues/468#issuecomment-1156887715
	Attestation *types.Any `protobuf:"bytes,1,opt,name=attestation,proto3" json:"attestation,omitempty"`
}

func (m *QueryAttestationRequestByNonceResponse) Reset() {
	*m = QueryAttestationRequestByNonceResponse{}
}
func (m *QueryAttestationRequestByNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAttestationRequestByNonceResponse) ProtoMessage()    {}
func (*QueryAttestationRequestByNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{3}
}
func (m *QueryAttestationRequestByNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAttestationRequestByNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAttestationRequestByNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAttestationRequestByNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAttestationRequestByNonceResponse.Merge(m, src)
}
func (m *QueryAttestationRequestByNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAttestationRequestByNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAttestationRequestByNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAttestationRequestByNonceResponse proto.InternalMessageInfo

func (m *QueryAttestationRequestByNonceResponse) GetAttestation() *types.Any {
	if m != nil {
		return m.Attestation
	}
	return nil
}

// QueryLatestAttestationNonceRequest latest attestation nonce request
type QueryLatestAttestationNonceRequest struct {
}

func (m *QueryLatestAttestationNonceRequest) Reset()         { *m = QueryLatestAttestationNonceRequest{} }
func (m *QueryLatestAttestationNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLatestAttestationNonceRequest) ProtoMessage()    {}
func (*QueryLatestAttestationNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{4}
}
func (m *QueryLatestAttestationNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestAttestationNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestAttestationNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestAttestationNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestAttestationNonceRequest.Merge(m, src)
}
func (m *QueryLatestAttestationNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestAttestationNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestAttestationNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestAttestationNonceRequest proto.InternalMessageInfo

// QueryLatestAttestationNonceResponse latest attestation nonce response
type QueryLatestAttestationNonceResponse struct {
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryLatestAttestationNonceResponse) Reset()         { *m = QueryLatestAttestationNonceResponse{} }
func (m *QueryLatestAttestationNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLatestAttestationNonceResponse) ProtoMessage()    {}
func (*QueryLatestAttestationNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{5}
}
func (m *QueryLatestAttestationNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestAttestationNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestAttestationNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestAttestationNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestAttestationNonceResponse.Merge(m, src)
}
func (m *QueryLatestAttestationNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestAttestationNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestAttestationNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestAttestationNonceResponse proto.InternalMessageInfo

func (m *QueryLatestAttestationNonceResponse) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// QueryValsetConfirmsByNonceRequest
type QueryValsetConfirmsByNonceRequest struct {
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryValsetConfirmsByNonceRequest) Reset()         { *m = QueryValsetConfirmsByNonceRequest{} }
func (m *QueryValsetConfirmsByNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValsetConfirmsByNonceRequest) ProtoMessage()    {}
func (*QueryValsetConfirmsByNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{6}
}
func (m *QueryValsetConfirmsByNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValsetConfirmsByNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValsetConfirmsByNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValsetConfirmsByNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValsetConfirmsByNonceRequest.Merge(m, src)
}
func (m *QueryValsetConfirmsByNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValsetConfirmsByNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValsetConfirmsByNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValsetConfirmsByNonceRequest proto.InternalMessageInfo

func (m *QueryValsetConfirmsByNonceRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// QueryValsetConfirmsByNonceResponse
type QueryValsetConfirmsByNonceResponse struct {
	Confirms []MsgValsetConfirm `protobuf:"bytes,1,rep,name=confirms,proto3" json:"confirms"`
}

func (m *QueryValsetConfirmsByNonceResponse) Reset()         { *m = QueryValsetConfirmsByNonceResponse{} }
func (m *QueryValsetConfirmsByNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValsetConfirmsByNonceResponse) ProtoMessage()    {}
func (*QueryValsetConfirmsByNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{7}
}
func (m *QueryValsetConfirmsByNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValsetConfirmsByNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValsetConfirmsByNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValsetConfirmsByNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValsetConfirmsByNonceResponse.Merge(m, src)
}
func (m *QueryValsetConfirmsByNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValsetConfirmsByNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValsetConfirmsByNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValsetConfirmsByNonceResponse proto.InternalMessageInfo

func (m *QueryValsetConfirmsByNonceResponse) GetConfirms() []MsgValsetConfirm {
	if m != nil {
		return m.Confirms
	}
	return nil
}

// QueryValsetConfirmRequest ValSet confirm query request
type QueryValsetConfirmRequest struct {
	Nonce   uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryValsetConfirmRequest) Reset()         { *m = QueryValsetConfirmRequest{} }
func (m *QueryValsetConfirmRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValsetConfirmRequest) ProtoMessage()    {}
func (*QueryValsetConfirmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{8}
}
func (m *QueryValsetConfirmRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValsetConfirmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValsetConfirmRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValsetConfirmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValsetConfirmRequest.Merge(m, src)
}
func (m *QueryValsetConfirmRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValsetConfirmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValsetConfirmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValsetConfirmRequest proto.InternalMessageInfo

func (m *QueryValsetConfirmRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *QueryValsetConfirmRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryValsetConfirmResponse ValSet confirm query response
type QueryValsetConfirmResponse struct {
	Confirm *MsgValsetConfirm `protobuf:"bytes,1,opt,name=confirm,proto3" json:"confirm,omitempty"`
}

func (m *QueryValsetConfirmResponse) Reset()         { *m = QueryValsetConfirmResponse{} }
func (m *QueryValsetConfirmResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValsetConfirmResponse) ProtoMessage()    {}
func (*QueryValsetConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{9}
}
func (m *QueryValsetConfirmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValsetConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValsetConfirmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValsetConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValsetConfirmResponse.Merge(m, src)
}
func (m *QueryValsetConfirmResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValsetConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValsetConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValsetConfirmResponse proto.InternalMessageInfo

func (m *QueryValsetConfirmResponse) GetConfirm() *MsgValsetConfirm {
	if m != nil {
		return m.Confirm
	}
	return nil
}

// QueryLastValsetRequestBeforeNonceRequest last Valset request before universal
// nonce request
type QueryLastValsetRequestBeforeNonceRequest struct {
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryLastValsetRequestBeforeNonceRequest) Reset() {
	*m = QueryLastValsetRequestBeforeNonceRequest{}
}
func (m *QueryLastValsetRequestBeforeNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastValsetRequestBeforeNonceRequest) ProtoMessage()    {}
func (*QueryLastValsetRequestBeforeNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{10}
}
func (m *QueryLastValsetRequestBeforeNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastValsetRequestBeforeNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastValsetRequestBeforeNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastValsetRequestBeforeNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastValsetRequestBeforeNonceRequest.Merge(m, src)
}
func (m *QueryLastValsetRequestBeforeNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastValsetRequestBeforeNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastValsetRequestBeforeNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastValsetRequestBeforeNonceRequest proto.InternalMessageInfo

func (m *QueryLastValsetRequestBeforeNonceRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// QueryLastValsetRequestBeforeNonceResponse last Valset request before height
// response
type QueryLastValsetRequestBeforeNonceResponse struct {
	Valset *Valset `protobuf:"bytes,1,opt,name=valset,proto3" json:"valset,omitempty"`
}

func (m *QueryLastValsetRequestBeforeNonceResponse) Reset() {
	*m = QueryLastValsetRequestBeforeNonceResponse{}
}
func (m *QueryLastValsetRequestBeforeNonceResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLastValsetRequestBeforeNonceResponse) ProtoMessage() {}
func (*QueryLastValsetRequestBeforeNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{11}
}
func (m *QueryLastValsetRequestBeforeNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastValsetRequestBeforeNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastValsetRequestBeforeNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastValsetRequestBeforeNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastValsetRequestBeforeNonceResponse.Merge(m, src)
}
func (m *QueryLastValsetRequestBeforeNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastValsetRequestBeforeNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastValsetRequestBeforeNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastValsetRequestBeforeNonceResponse proto.InternalMessageInfo

func (m *QueryLastValsetRequestBeforeNonceResponse) GetValset() *Valset {
	if m != nil {
		return m.Valset
	}
	return nil
}

// QueryDataCommitmentConfirmsRequest Data commitment confirm by commitment and
// validator address request
type QueryDataCommitmentConfirmRequest struct {
	BeginBlock uint64 `protobuf:"varint,1,opt,name=begin_block,json=beginBlock,proto3" json:"begin_block,omitempty"`
	EndBlock   uint64 `protobuf:"varint,2,opt,name=end_block,json=endBlock,proto3" json:"end_block,omitempty"`
	Address    string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryDataCommitmentConfirmRequest) Reset()         { *m = QueryDataCommitmentConfirmRequest{} }
func (m *QueryDataCommitmentConfirmRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDataCommitmentConfirmRequest) ProtoMessage()    {}
func (*QueryDataCommitmentConfirmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{12}
}
func (m *QueryDataCommitmentConfirmRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataCommitmentConfirmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataCommitmentConfirmRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataCommitmentConfirmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataCommitmentConfirmRequest.Merge(m, src)
}
func (m *QueryDataCommitmentConfirmRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataCommitmentConfirmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataCommitmentConfirmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataCommitmentConfirmRequest proto.InternalMessageInfo

func (m *QueryDataCommitmentConfirmRequest) GetBeginBlock() uint64 {
	if m != nil {
		return m.BeginBlock
	}
	return 0
}

func (m *QueryDataCommitmentConfirmRequest) GetEndBlock() uint64 {
	if m != nil {
		return m.EndBlock
	}
	return 0
}

func (m *QueryDataCommitmentConfirmRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryDataCommitmentConfirmsResponse Data commitment confirm by commitment and
// validator address response
type QueryDataCommitmentConfirmResponse struct {
	Confirm *MsgDataCommitmentConfirm `protobuf:"bytes,1,opt,name=confirm,proto3" json:"confirm,omitempty"`
}

func (m *QueryDataCommitmentConfirmResponse) Reset()         { *m = QueryDataCommitmentConfirmResponse{} }
func (m *QueryDataCommitmentConfirmResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDataCommitmentConfirmResponse) ProtoMessage()    {}
func (*QueryDataCommitmentConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{13}
}
func (m *QueryDataCommitmentConfirmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataCommitmentConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataCommitmentConfirmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataCommitmentConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataCommitmentConfirmResponse.Merge(m, src)
}
func (m *QueryDataCommitmentConfirmResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataCommitmentConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataCommitmentConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataCommitmentConfirmResponse proto.InternalMessageInfo

func (m *QueryDataCommitmentConfirmResponse) GetConfirm() *MsgDataCommitmentConfirm {
	if m != nil {
		return m.Confirm
	}
	return nil
}

// QueryDataCommitmentConfirmsByExactRangeRequest Data commitment confirms by
// exact range request
type QueryDataCommitmentConfirmsByExactRangeRequest struct {
	BeginBlock uint64 `protobuf:"varint,1,opt,name=begin_block,json=beginBlock,proto3" json:"begin_block,omitempty"`
	EndBlock   uint64 `protobuf:"varint,2,opt,name=end_block,json=endBlock,proto3" json:"end_block,omitempty"`
}

func (m *QueryDataCommitmentConfirmsByExactRangeRequest) Reset() {
	*m = QueryDataCommitmentConfirmsByExactRangeRequest{}
}
func (m *QueryDataCommitmentConfirmsByExactRangeRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryDataCommitmentConfirmsByExactRangeRequest) ProtoMessage() {}
func (*QueryDataCommitmentConfirmsByExactRangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{14}
}
func (m *QueryDataCommitmentConfirmsByExactRangeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataCommitmentConfirmsByExactRangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataCommitmentConfirmsByExactRangeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataCommitmentConfirmsByExactRangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataCommitmentConfirmsByExactRangeRequest.Merge(m, src)
}
func (m *QueryDataCommitmentConfirmsByExactRangeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataCommitmentConfirmsByExactRangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataCommitmentConfirmsByExactRangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataCommitmentConfirmsByExactRangeRequest proto.InternalMessageInfo

func (m *QueryDataCommitmentConfirmsByExactRangeRequest) GetBeginBlock() uint64 {
	if m != nil {
		return m.BeginBlock
	}
	return 0
}

func (m *QueryDataCommitmentConfirmsByExactRangeRequest) GetEndBlock() uint64 {
	if m != nil {
		return m.EndBlock
	}
	return 0
}

// QueryDataCommitmentConfirmsByExactRangeResponse Data commitment confirms by
// exact range response
type QueryDataCommitmentConfirmsByExactRangeResponse struct {
	Confirms []MsgDataCommitmentConfirm `protobuf:"bytes,1,rep,name=confirms,proto3" json:"confirms"`
}

func (m *QueryDataCommitmentConfirmsByExactRangeResponse) Reset() {
	*m = QueryDataCommitmentConfirmsByExactRangeResponse{}
}
func (m *QueryDataCommitmentConfirmsByExactRangeResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryDataCommitmentConfirmsByExactRangeResponse) ProtoMessage() {}
func (*QueryDataCommitmentConfirmsByExactRangeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{15}
}
func (m *QueryDataCommitmentConfirmsByExactRangeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataCommitmentConfirmsByExactRangeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataCommitmentConfirmsByExactRangeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataCommitmentConfirmsByExactRangeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataCommitmentConfirmsByExactRangeResponse.Merge(m, src)
}
func (m *QueryDataCommitmentConfirmsByExactRangeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataCommitmentConfirmsByExactRangeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataCommitmentConfirmsByExactRangeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataCommitmentConfirmsByExactRangeResponse proto.InternalMessageInfo

func (m *QueryDataCommitmentConfirmsByExactRangeResponse) GetConfirms() []MsgDataCommitmentConfirm {
	if m != nil {
		return m.Confirms
	}
	return nil
}

// QueryLastUnbondingHeightRequest
type QueryLastUnbondingHeightRequest struct {
}

func (m *QueryLastUnbondingHeightRequest) Reset()         { *m = QueryLastUnbondingHeightRequest{} }
func (m *QueryLastUnbondingHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastUnbondingHeightRequest) ProtoMessage()    {}
func (*QueryLastUnbondingHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{16}
}
func (m *QueryLastUnbondingHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastUnbondingHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastUnbondingHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastUnbondingHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastUnbondingHeightRequest.Merge(m, src)
}
func (m *QueryLastUnbondingHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastUnbondingHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastUnbondingHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastUnbondingHeightRequest proto.InternalMessageInfo

// QueryLastUnbondingHeightResponse
type QueryLastUnbondingHeightResponse struct {
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryLastUnbondingHeightResponse) Reset()         { *m = QueryLastUnbondingHeightResponse{} }
func (m *QueryLastUnbondingHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastUnbondingHeightResponse) ProtoMessage()    {}
func (*QueryLastUnbondingHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c1fd86445aad81, []int{17}
}
func (m *QueryLastUnbondingHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastUnbondingHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastUnbondingHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastUnbondingHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastUnbondingHeightResponse.Merge(m, src)
}
func (m *QueryLastUnbondingHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastUnbondingHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastUnbondingHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastUnbondingHeightResponse proto.InternalMessageInfo

func (m *QueryLastUnbondingHeightResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "qgb.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "qgb.QueryParamsResponse")
	proto.RegisterType((*QueryAttestationRequestByNonceRequest)(nil), "qgb.QueryAttestationRequestByNonceRequest")
	proto.RegisterType((*QueryAttestationRequestByNonceResponse)(nil), "qgb.QueryAttestationRequestByNonceResponse")
	proto.RegisterType((*QueryLatestAttestationNonceRequest)(nil), "qgb.QueryLatestAttestationNonceRequest")
	proto.RegisterType((*QueryLatestAttestationNonceResponse)(nil), "qgb.QueryLatestAttestationNonceResponse")
	proto.RegisterType((*QueryValsetConfirmsByNonceRequest)(nil), "qgb.QueryValsetConfirmsByNonceRequest")
	proto.RegisterType((*QueryValsetConfirmsByNonceResponse)(nil), "qgb.QueryValsetConfirmsByNonceResponse")
	proto.RegisterType((*QueryValsetConfirmRequest)(nil), "qgb.QueryValsetConfirmRequest")
	proto.RegisterType((*QueryValsetConfirmResponse)(nil), "qgb.QueryValsetConfirmResponse")
	proto.RegisterType((*QueryLastValsetRequestBeforeNonceRequest)(nil), "qgb.QueryLastValsetRequestBeforeNonceRequest")
	proto.RegisterType((*QueryLastValsetRequestBeforeNonceResponse)(nil), "qgb.QueryLastValsetRequestBeforeNonceResponse")
	proto.RegisterType((*QueryDataCommitmentConfirmRequest)(nil), "qgb.QueryDataCommitmentConfirmRequest")
	proto.RegisterType((*QueryDataCommitmentConfirmResponse)(nil), "qgb.QueryDataCommitmentConfirmResponse")
	proto.RegisterType((*QueryDataCommitmentConfirmsByExactRangeRequest)(nil), "qgb.QueryDataCommitmentConfirmsByExactRangeRequest")
	proto.RegisterType((*QueryDataCommitmentConfirmsByExactRangeResponse)(nil), "qgb.QueryDataCommitmentConfirmsByExactRangeResponse")
	proto.RegisterType((*QueryLastUnbondingHeightRequest)(nil), "qgb.QueryLastUnbondingHeightRequest")
	proto.RegisterType((*QueryLastUnbondingHeightResponse)(nil), "qgb.QueryLastUnbondingHeightResponse")
}

func init() { proto.RegisterFile("qgb/query.proto", fileDescriptor_f3c1fd86445aad81) }

var fileDescriptor_f3c1fd86445aad81 = []byte{
	// 1004 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0x26, 0xad, 0xdb, 0x3e, 0xab, 0x05, 0xc6, 0x71, 0xe2, 0x6c, 0x5b, 0xc7, 0xdd, 0xa6,
	0xa9, 0x1b, 0x14, 0x8f, 0x9a, 0x22, 0x21, 0x40, 0x88, 0xd6, 0x05, 0x89, 0x0a, 0x0a, 0xc1, 0x50,
	0x0e, 0x45, 0x28, 0x9a, 0xb5, 0x27, 0x9b, 0x15, 0xde, 0x19, 0x7b, 0x67, 0x5d, 0xd5, 0x58, 0xb9,
	0x70, 0xe1, 0x8a, 0xd4, 0x3f, 0xc0, 0x95, 0x3b, 0x3f, 0x81, 0x43, 0xc5, 0xa9, 0x12, 0x17, 0x4e,
	0x08, 0x25, 0x5c, 0x90, 0xf8, 0x11, 0x68, 0x67, 0xdf, 0xae, 0xd7, 0xf5, 0x7a, 0x6d, 0x24, 0x6e,
	0x33, 0xef, 0x7d, 0xef, 0xcd, 0xf7, 0xde, 0xbc, 0xf7, 0x66, 0xe0, 0x95, 0xbe, 0x63, 0xd3, 0xfe,
	0x80, 0xfb, 0xc3, 0x46, 0xcf, 0x97, 0x81, 0x24, 0x2b, 0x7d, 0xc7, 0x36, 0x5f, 0x0b, 0xa5, 0x0e,
	0x17, 0x5c, 0xb9, 0x2a, 0x92, 0x9b, 0x1a, 0x18, 0x0c, 0x7b, 0x3c, 0x16, 0x5c, 0x71, 0xa4, 0x74,
	0xba, 0x9c, 0xb2, 0x9e, 0x4b, 0x99, 0x10, 0x32, 0x60, 0x81, 0x2b, 0x45, 0xac, 0xdd, 0x69, 0x4b,
	0xe5, 0x49, 0x45, 0x6d, 0xa6, 0x78, 0xe4, 0x9f, 0x3e, 0xb9, 0x6d, 0xf3, 0x80, 0xdd, 0xa6, 0x3d,
	0xe6, 0xb8, 0x42, 0x83, 0x11, 0x7b, 0x29, 0x74, 0xed, 0x29, 0x27, 0xb6, 0x5d, 0x75, 0xa4, 0x23,
	0xf5, 0x92, 0x86, 0x2b, 0x94, 0x6e, 0x44, 0x1e, 0x0f, 0x22, 0x45, 0xb4, 0x89, 0x55, 0x48, 0x45,
	0xef, 0xec, 0xc1, 0x21, 0x65, 0x02, 0xc3, 0xb1, 0x56, 0x81, 0x7c, 0x16, 0x9e, 0xbe, 0xcf, 0x7c,
	0xe6, 0xa9, 0x16, 0xef, 0x0f, 0xb8, 0x0a, 0xac, 0xbb, 0x50, 0x9a, 0x90, 0xaa, 0x9e, 0x14, 0x8a,
	0x93, 0x5b, 0x50, 0xe8, 0x69, 0x49, 0xc5, 0xa8, 0x19, 0xf5, 0xe2, 0x5e, 0xb1, 0xd1, 0x77, 0xec,
	0x46, 0x04, 0x6a, 0x9e, 0x79, 0xfe, 0xc7, 0xe6, 0x52, 0x0b, 0x01, 0xd6, 0xbb, 0x70, 0x43, 0x7b,
	0xb8, 0x17, 0x04, 0x5c, 0x45, 0xa1, 0xa3, 0xf3, 0xe6, 0xf0, 0x13, 0x29, 0xda, 0x1c, 0x77, 0x64,
	0x15, 0xce, 0x8a, 0x70, 0xaf, 0x5d, 0x9e, 0x69, 0x45, 0x1b, 0x6b, 0x08, 0xdb, 0xf3, 0xcc, 0x91,
	0xd3, 0xa7, 0x50, 0x64, 0x63, 0x10, 0x12, 0x5b, 0x6d, 0x44, 0x11, 0x37, 0xe2, 0x88, 0x1b, 0xf7,
	0xc4, 0xb0, 0xb9, 0xfe, 0xeb, 0xcf, 0xbb, 0xa5, 0x69, 0x8f, 0x0f, 0x5a, 0x69, 0x0f, 0xd6, 0x16,
	0x58, 0xfa, 0xe8, 0x8f, 0x59, 0x28, 0x4b, 0xc1, 0xd3, 0xb4, 0xad, 0x77, 0xe0, 0x7a, 0x2e, 0x0a,
	0xd9, 0x65, 0x47, 0xf7, 0x16, 0x5c, 0xd3, 0xc6, 0x5f, 0xb2, 0xae, 0xe2, 0xc1, 0x7d, 0x29, 0x0e,
	0x5d, 0xdf, 0x53, 0x0b, 0x25, 0xe6, 0x6b, 0x64, 0x37, 0xc3, 0x14, 0x8f, 0x7d, 0x13, 0xce, 0xb7,
	0x51, 0x55, 0x31, 0x6a, 0x2b, 0xf5, 0xe2, 0x5e, 0x59, 0x5f, 0xd5, 0x43, 0xe5, 0x4c, 0x18, 0xe2,
	0xa5, 0x25, 0x60, 0xeb, 0x23, 0xd8, 0x98, 0x76, 0x9f, 0xcb, 0x88, 0x54, 0xe0, 0x1c, 0xeb, 0x74,
	0x7c, 0xae, 0x54, 0x65, 0xb9, 0x66, 0xd4, 0x2f, 0xb4, 0xe2, 0xad, 0xf5, 0x10, 0xcc, 0x2c, 0x67,
	0xc8, 0x91, 0xc2, 0x39, 0x3c, 0x16, 0x2f, 0x2d, 0x9b, 0x62, 0x2b, 0x46, 0x59, 0x77, 0xa1, 0x8e,
	0x29, 0x57, 0x41, 0x04, 0x89, 0x4b, 0x82, 0x1f, 0x4a, 0x9f, 0x2f, 0x90, 0xbc, 0x7d, 0xb8, 0xb5,
	0x80, 0x07, 0xe4, 0x77, 0x1d, 0x0a, 0x4f, 0x34, 0x66, 0xa2, 0xd8, 0xd1, 0x0c, 0x55, 0xd6, 0x08,
	0x6f, 0xf2, 0x7d, 0x16, 0xb0, 0xfb, 0xd2, 0xf3, 0xdc, 0xc0, 0xe3, 0xe2, 0xe5, 0xbc, 0x6d, 0x42,
	0xd1, 0xe6, 0x8e, 0x2b, 0x0e, 0xec, 0xae, 0x6c, 0x7f, 0x83, 0x94, 0x40, 0x8b, 0x9a, 0xa1, 0x84,
	0x5c, 0x86, 0x0b, 0x5c, 0x74, 0x50, 0xbd, 0xac, 0xd5, 0xe7, 0xb9, 0xe8, 0x44, 0xca, 0x54, 0x7e,
	0x57, 0x26, 0xf3, 0x1b, 0xd7, 0xc2, 0x8c, 0xc3, 0x93, 0x5a, 0x78, 0x29, 0xcf, 0x57, 0xe3, 0x3c,
	0x67, 0xdb, 0x25, 0xf9, 0x16, 0xd0, 0x98, 0xed, 0x5e, 0x35, 0x87, 0x1f, 0x3c, 0x65, 0xed, 0xa0,
	0xc5, 0x84, 0xc3, 0xff, 0x97, 0x40, 0x2d, 0x1f, 0xe8, 0xc2, 0xe7, 0x61, 0x6c, 0xef, 0x4d, 0xd5,
	0x79, 0x7e, 0x70, 0x53, 0xf5, 0x7e, 0x0d, 0x36, 0x93, 0x8a, 0x78, 0x24, 0x6c, 0x29, 0x3a, 0xae,
	0x70, 0x3e, 0xe4, 0xae, 0x73, 0x14, 0x97, 0x86, 0xf5, 0x36, 0xd4, 0x66, 0x43, 0x90, 0xc7, 0x1a,
	0x14, 0x8e, 0xb4, 0x04, 0x63, 0xc6, 0xdd, 0xde, 0xdf, 0x00, 0x67, 0xb5, 0x31, 0xd9, 0x87, 0x42,
	0x34, 0x27, 0xc9, 0xba, 0x66, 0x38, 0x3d, 0x74, 0xcd, 0xca, 0xb4, 0x22, 0x72, 0x6f, 0x95, 0xbe,
	0xfb, 0xed, 0xaf, 0x67, 0xcb, 0x17, 0x49, 0x91, 0x86, 0x2f, 0x41, 0x34, 0x61, 0xc9, 0x8f, 0x06,
	0x6c, 0xcc, 0x1c, 0x8f, 0x64, 0x67, 0xec, 0x6c, 0xde, 0x08, 0x36, 0x5f, 0x5f, 0x08, 0x8b, 0x5c,
	0x76, 0x34, 0x97, 0x2d, 0x62, 0x69, 0x2e, 0xa9, 0xc1, 0xa9, 0xa8, 0x1f, 0x59, 0x28, 0x3a, 0xd2,
	0xed, 0x76, 0x4c, 0x9e, 0x19, 0xb0, 0x96, 0x3d, 0x20, 0xc9, 0xcd, 0xf1, 0x99, 0xb9, 0x83, 0xd6,
	0xac, 0xcf, 0x07, 0x22, 0xb3, 0x6d, 0xcd, 0xac, 0x46, 0xaa, 0xd3, 0xcc, 0x34, 0x1f, 0xda, 0xd5,
	0xf6, 0xe4, 0x17, 0x03, 0xca, 0x99, 0xd5, 0x41, 0xb6, 0xc7, 0x67, 0xe5, 0x35, 0xb4, 0x79, 0x73,
	0x2e, 0x0e, 0x29, 0x3d, 0xd6, 0x94, 0xbe, 0x20, 0x2d, 0x4d, 0xa9, 0xc3, 0x02, 0x76, 0xd0, 0x4e,
	0xc0, 0x14, 0xab, 0x90, 0xea, 0x06, 0xa1, 0xa3, 0x54, 0xeb, 0x1c, 0x53, 0x2e, 0x3a, 0x74, 0x94,
	0xf4, 0xca, 0x31, 0xc5, 0x9e, 0xa7, 0x23, 0x5c, 0x1c, 0x93, 0x7f, 0x0c, 0xb0, 0xe6, 0xb7, 0x0a,
	0xb9, 0x33, 0x87, 0x6b, 0x56, 0x23, 0x9b, 0x6f, 0xfc, 0x37, 0x23, 0x8c, 0xf6, 0x2b, 0x1d, 0xed,
	0x23, 0xf2, 0x79, 0x5e, 0xb4, 0x8a, 0xf2, 0xd0, 0x92, 0xa6, 0xa2, 0x9d, 0x0e, 0x3d, 0x96, 0x8f,
	0x13, 0x40, 0x3c, 0xb8, 0x38, 0xf1, 0x2e, 0x90, 0xea, 0x98, 0x63, 0xd6, 0x6b, 0x65, 0x6e, 0xce,
	0xd4, 0x23, 0xdd, 0xcb, 0x9a, 0x6e, 0x99, 0x94, 0x34, 0xdd, 0x68, 0xa0, 0xc7, 0x2c, 0xc9, 0x4f,
	0x06, 0x5c, 0xc9, 0x7b, 0x26, 0xc8, 0x6e, 0xba, 0x2e, 0xe7, 0x3e, 0x48, 0x66, 0x63, 0x51, 0x78,
	0x66, 0x9b, 0x21, 0x39, 0x6c, 0x30, 0x6a, 0x6b, 0x83, 0xa4, 0xcd, 0xbe, 0x37, 0xa0, 0x9c, 0xf9,
	0x1f, 0x48, 0x17, 0x74, 0xde, 0x5f, 0x23, 0x5d, 0xd0, 0xb9, 0x1f, 0x0b, 0xeb, 0xaa, 0xa6, 0xb5,
	0x4e, 0xca, 0x9a, 0x56, 0x72, 0xa5, 0x31, 0x93, 0x6f, 0xa1, 0x94, 0x31, 0x26, 0xc9, 0xd6, 0x64,
	0xf0, 0xd9, 0x83, 0xd6, 0xbc, 0x31, 0x07, 0x85, 0x14, 0xd6, 0x34, 0x85, 0x57, 0xc9, 0x25, 0x4d,
	0x61, 0x10, 0xa3, 0x9a, 0x0f, 0x9e, 0x9f, 0x54, 0x8d, 0x17, 0x27, 0x55, 0xe3, 0xcf, 0x93, 0xaa,
	0xf1, 0xc3, 0x69, 0x75, 0xe9, 0xc5, 0x69, 0x75, 0xe9, 0xf7, 0xd3, 0xea, 0xd2, 0x63, 0xea, 0xb8,
	0xc1, 0xd1, 0xc0, 0x6e, 0xb4, 0xa5, 0x47, 0xdb, 0xbc, 0xcb, 0x55, 0xe0, 0x32, 0xe9, 0x3b, 0xc9,
	0x7a, 0x97, 0xf5, 0x7a, 0xf4, 0x29, 0x4d, 0x3e, 0xf0, 0x76, 0x41, 0x7f, 0x1b, 0xef, 0xfc, 0x1b,
	0x00, 0x00, 0xff, 0xff, 0xb5, 0xe8, 0xb7, 0xf6, 0xfd, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the current parameters for the qgb module
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// AttestationRequestByNonce queries attestation request by nonce.
	// Returns nil if not found.
	AttestationRequestByNonce(ctx context.Context, in *QueryAttestationRequestByNonceRequest, opts ...grpc.CallOption) (*QueryAttestationRequestByNonceResponse, error)
	// LatestAttestationNonce queries latest attestation nonce.
	LatestAttestationNonce(ctx context.Context, in *QueryLatestAttestationNonceRequest, opts ...grpc.CallOption) (*QueryLatestAttestationNonceResponse, error)
	// DataCommitmentConfirm Queries the data commitment confirm by the commitment
	// and the validator address
	// Returns nil if not found.
	DataCommitmentConfirm(ctx context.Context, in *QueryDataCommitmentConfirmRequest, opts ...grpc.CallOption) (*QueryDataCommitmentConfirmResponse, error)
	// DataCommitmentConfirmsByExactRange Queries data commitment confirms by an
	// exact block range.
	// Returns empty array if no element is found.
	DataCommitmentConfirmsByExactRange(ctx context.Context, in *QueryDataCommitmentConfirmsByExactRangeRequest, opts ...grpc.CallOption) (*QueryDataCommitmentConfirmsByExactRangeResponse, error)
	// ValsetConfirm Queries ValSetConfirm
	// Returns nil if not found.
	ValsetConfirm(ctx context.Context, in *QueryValsetConfirmRequest, opts ...grpc.CallOption) (*QueryValsetConfirmResponse, error)
	// LastValsetRequestBeforeNonce Queries last Valset request before nonce.
	// And, even if the current nonce is a valset, if will return the previous
	// one.
	// If the provided nonce is 1. It will return an error. Because, there is
	// no valset before nonce 1.
	LastValsetRequestBeforeNonce(ctx context.Context, in *QueryLastValsetRequestBeforeNonceRequest, opts ...grpc.CallOption) (*QueryLastValsetRequestBeforeNonceResponse, error)
	// ValsetConfirmsByNonce
	// Returns empty array if no element is found.
	ValsetConfirmsByNonce(ctx context.Context, in *QueryValsetConfirmsByNonceRequest, opts ...grpc.CallOption) (*QueryValsetConfirmsByNonceResponse, error)
	// LastUnbondingHeight returns the last unbonding height
	LastUnbondingHeight(ctx context.Context, in *QueryLastUnbondingHeightRequest, opts ...grpc.CallOption) (*QueryLastUnbondingHeightResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/qgb.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AttestationRequestByNonce(ctx context.Context, in *QueryAttestationRequestByNonceRequest, opts ...grpc.CallOption) (*QueryAttestationRequestByNonceResponse, error) {
	out := new(QueryAttestationRequestByNonceResponse)
	err := c.cc.Invoke(ctx, "/qgb.Query/AttestationRequestByNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestAttestationNonce(ctx context.Context, in *QueryLatestAttestationNonceRequest, opts ...grpc.CallOption) (*QueryLatestAttestationNonceResponse, error) {
	out := new(QueryLatestAttestationNonceResponse)
	err := c.cc.Invoke(ctx, "/qgb.Query/LatestAttestationNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DataCommitmentConfirm(ctx context.Context, in *QueryDataCommitmentConfirmRequest, opts ...grpc.CallOption) (*QueryDataCommitmentConfirmResponse, error) {
	out := new(QueryDataCommitmentConfirmResponse)
	err := c.cc.Invoke(ctx, "/qgb.Query/DataCommitmentConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DataCommitmentConfirmsByExactRange(ctx context.Context, in *QueryDataCommitmentConfirmsByExactRangeRequest, opts ...grpc.CallOption) (*QueryDataCommitmentConfirmsByExactRangeResponse, error) {
	out := new(QueryDataCommitmentConfirmsByExactRangeResponse)
	err := c.cc.Invoke(ctx, "/qgb.Query/DataCommitmentConfirmsByExactRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValsetConfirm(ctx context.Context, in *QueryValsetConfirmRequest, opts ...grpc.CallOption) (*QueryValsetConfirmResponse, error) {
	out := new(QueryValsetConfirmResponse)
	err := c.cc.Invoke(ctx, "/qgb.Query/ValsetConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastValsetRequestBeforeNonce(ctx context.Context, in *QueryLastValsetRequestBeforeNonceRequest, opts ...grpc.CallOption) (*QueryLastValsetRequestBeforeNonceResponse, error) {
	out := new(QueryLastValsetRequestBeforeNonceResponse)
	err := c.cc.Invoke(ctx, "/qgb.Query/LastValsetRequestBeforeNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValsetConfirmsByNonce(ctx context.Context, in *QueryValsetConfirmsByNonceRequest, opts ...grpc.CallOption) (*QueryValsetConfirmsByNonceResponse, error) {
	out := new(QueryValsetConfirmsByNonceResponse)
	err := c.cc.Invoke(ctx, "/qgb.Query/ValsetConfirmsByNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastUnbondingHeight(ctx context.Context, in *QueryLastUnbondingHeightRequest, opts ...grpc.CallOption) (*QueryLastUnbondingHeightResponse, error) {
	out := new(QueryLastUnbondingHeightResponse)
	err := c.cc.Invoke(ctx, "/qgb.Query/LastUnbondingHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the current parameters for the qgb module
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// AttestationRequestByNonce queries attestation request by nonce.
	// Returns nil if not found.
	AttestationRequestByNonce(context.Context, *QueryAttestationRequestByNonceRequest) (*QueryAttestationRequestByNonceResponse, error)
	// LatestAttestationNonce queries latest attestation nonce.
	LatestAttestationNonce(context.Context, *QueryLatestAttestationNonceRequest) (*QueryLatestAttestationNonceResponse, error)
	// DataCommitmentConfirm Queries the data commitment confirm by the commitment
	// and the validator address
	// Returns nil if not found.
	DataCommitmentConfirm(context.Context, *QueryDataCommitmentConfirmRequest) (*QueryDataCommitmentConfirmResponse, error)
	// DataCommitmentConfirmsByExactRange Queries data commitment confirms by an
	// exact block range.
	// Returns empty array if no element is found.
	DataCommitmentConfirmsByExactRange(context.Context, *QueryDataCommitmentConfirmsByExactRangeRequest) (*QueryDataCommitmentConfirmsByExactRangeResponse, error)
	// ValsetConfirm Queries ValSetConfirm
	// Returns nil if not found.
	ValsetConfirm(context.Context, *QueryValsetConfirmRequest) (*QueryValsetConfirmResponse, error)
	// LastValsetRequestBeforeNonce Queries last Valset request before nonce.
	// And, even if the current nonce is a valset, if will return the previous
	// one.
	// If the provided nonce is 1. It will return an error. Because, there is
	// no valset before nonce 1.
	LastValsetRequestBeforeNonce(context.Context, *QueryLastValsetRequestBeforeNonceRequest) (*QueryLastValsetRequestBeforeNonceResponse, error)
	// ValsetConfirmsByNonce
	// Returns empty array if no element is found.
	ValsetConfirmsByNonce(context.Context, *QueryValsetConfirmsByNonceRequest) (*QueryValsetConfirmsByNonceResponse, error)
	// LastUnbondingHeight returns the last unbonding height
	LastUnbondingHeight(context.Context, *QueryLastUnbondingHeightRequest) (*QueryLastUnbondingHeightResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) AttestationRequestByNonce(ctx context.Context, req *QueryAttestationRequestByNonceRequest) (*QueryAttestationRequestByNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttestationRequestByNonce not implemented")
}
func (*UnimplementedQueryServer) LatestAttestationNonce(ctx context.Context, req *QueryLatestAttestationNonceRequest) (*QueryLatestAttestationNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestAttestationNonce not implemented")
}
func (*UnimplementedQueryServer) DataCommitmentConfirm(ctx context.Context, req *QueryDataCommitmentConfirmRequest) (*QueryDataCommitmentConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataCommitmentConfirm not implemented")
}
func (*UnimplementedQueryServer) DataCommitmentConfirmsByExactRange(ctx context.Context, req *QueryDataCommitmentConfirmsByExactRangeRequest) (*QueryDataCommitmentConfirmsByExactRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataCommitmentConfirmsByExactRange not implemented")
}
func (*UnimplementedQueryServer) ValsetConfirm(ctx context.Context, req *QueryValsetConfirmRequest) (*QueryValsetConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValsetConfirm not implemented")
}
func (*UnimplementedQueryServer) LastValsetRequestBeforeNonce(ctx context.Context, req *QueryLastValsetRequestBeforeNonceRequest) (*QueryLastValsetRequestBeforeNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastValsetRequestBeforeNonce not implemented")
}
func (*UnimplementedQueryServer) ValsetConfirmsByNonce(ctx context.Context, req *QueryValsetConfirmsByNonceRequest) (*QueryValsetConfirmsByNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValsetConfirmsByNonce not implemented")
}
func (*UnimplementedQueryServer) LastUnbondingHeight(ctx context.Context, req *QueryLastUnbondingHeightRequest) (*QueryLastUnbondingHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastUnbondingHeight not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qgb.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AttestationRequestByNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAttestationRequestByNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AttestationRequestByNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qgb.Query/AttestationRequestByNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AttestationRequestByNonce(ctx, req.(*QueryAttestationRequestByNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestAttestationNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestAttestationNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestAttestationNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qgb.Query/LatestAttestationNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestAttestationNonce(ctx, req.(*QueryLatestAttestationNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DataCommitmentConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDataCommitmentConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DataCommitmentConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qgb.Query/DataCommitmentConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DataCommitmentConfirm(ctx, req.(*QueryDataCommitmentConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DataCommitmentConfirmsByExactRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDataCommitmentConfirmsByExactRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DataCommitmentConfirmsByExactRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qgb.Query/DataCommitmentConfirmsByExactRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DataCommitmentConfirmsByExactRange(ctx, req.(*QueryDataCommitmentConfirmsByExactRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValsetConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValsetConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValsetConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qgb.Query/ValsetConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValsetConfirm(ctx, req.(*QueryValsetConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastValsetRequestBeforeNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastValsetRequestBeforeNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastValsetRequestBeforeNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qgb.Query/LastValsetRequestBeforeNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastValsetRequestBeforeNonce(ctx, req.(*QueryLastValsetRequestBeforeNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValsetConfirmsByNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValsetConfirmsByNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValsetConfirmsByNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qgb.Query/ValsetConfirmsByNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValsetConfirmsByNonce(ctx, req.(*QueryValsetConfirmsByNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastUnbondingHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastUnbondingHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastUnbondingHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qgb.Query/LastUnbondingHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastUnbondingHeight(ctx, req.(*QueryLastUnbondingHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "qgb.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "AttestationRequestByNonce",
			Handler:    _Query_AttestationRequestByNonce_Handler,
		},
		{
			MethodName: "LatestAttestationNonce",
			Handler:    _Query_LatestAttestationNonce_Handler,
		},
		{
			MethodName: "DataCommitmentConfirm",
			Handler:    _Query_DataCommitmentConfirm_Handler,
		},
		{
			MethodName: "DataCommitmentConfirmsByExactRange",
			Handler:    _Query_DataCommitmentConfirmsByExactRange_Handler,
		},
		{
			MethodName: "ValsetConfirm",
			Handler:    _Query_ValsetConfirm_Handler,
		},
		{
			MethodName: "LastValsetRequestBeforeNonce",
			Handler:    _Query_LastValsetRequestBeforeNonce_Handler,
		},
		{
			MethodName: "ValsetConfirmsByNonce",
			Handler:    _Query_ValsetConfirmsByNonce_Handler,
		},
		{
			MethodName: "LastUnbondingHeight",
			Handler:    _Query_LastUnbondingHeight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qgb/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAttestationRequestByNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAttestationRequestByNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAttestationRequestByNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAttestationRequestByNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAttestationRequestByNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAttestationRequestByNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Attestation != nil {
		{
			size, err := m.Attestation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestAttestationNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestAttestationNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestAttestationNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLatestAttestationNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestAttestationNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestAttestationNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryValsetConfirmsByNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValsetConfirmsByNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValsetConfirmsByNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryValsetConfirmsByNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValsetConfirmsByNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValsetConfirmsByNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Confirms) > 0 {
		for iNdEx := len(m.Confirms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Confirms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryValsetConfirmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValsetConfirmRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValsetConfirmRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryValsetConfirmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValsetConfirmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValsetConfirmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Confirm != nil {
		{
			size, err := m.Confirm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastValsetRequestBeforeNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastValsetRequestBeforeNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastValsetRequestBeforeNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastValsetRequestBeforeNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastValsetRequestBeforeNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastValsetRequestBeforeNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Valset != nil {
		{
			size, err := m.Valset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataCommitmentConfirmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataCommitmentConfirmRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataCommitmentConfirmRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EndBlock != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EndBlock))
		i--
		dAtA[i] = 0x10
	}
	if m.BeginBlock != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BeginBlock))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataCommitmentConfirmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataCommitmentConfirmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataCommitmentConfirmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Confirm != nil {
		{
			size, err := m.Confirm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataCommitmentConfirmsByExactRangeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataCommitmentConfirmsByExactRangeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataCommitmentConfirmsByExactRangeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndBlock != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EndBlock))
		i--
		dAtA[i] = 0x10
	}
	if m.BeginBlock != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BeginBlock))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataCommitmentConfirmsByExactRangeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataCommitmentConfirmsByExactRangeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataCommitmentConfirmsByExactRangeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Confirms) > 0 {
		for iNdEx := len(m.Confirms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Confirms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastUnbondingHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastUnbondingHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastUnbondingHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLastUnbondingHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastUnbondingHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastUnbondingHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAttestationRequestByNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryAttestationRequestByNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Attestation != nil {
		l = m.Attestation.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLatestAttestationNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLatestAttestationNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryValsetConfirmsByNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryValsetConfirmsByNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Confirms) > 0 {
		for _, e := range m.Confirms {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryValsetConfirmRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValsetConfirmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Confirm != nil {
		l = m.Confirm.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastValsetRequestBeforeNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryLastValsetRequestBeforeNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valset != nil {
		l = m.Valset.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDataCommitmentConfirmRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BeginBlock != 0 {
		n += 1 + sovQuery(uint64(m.BeginBlock))
	}
	if m.EndBlock != 0 {
		n += 1 + sovQuery(uint64(m.EndBlock))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDataCommitmentConfirmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Confirm != nil {
		l = m.Confirm.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDataCommitmentConfirmsByExactRangeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BeginBlock != 0 {
		n += 1 + sovQuery(uint64(m.BeginBlock))
	}
	if m.EndBlock != 0 {
		n += 1 + sovQuery(uint64(m.EndBlock))
	}
	return n
}

func (m *QueryDataCommitmentConfirmsByExactRangeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Confirms) > 0 {
		for _, e := range m.Confirms {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLastUnbondingHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLastUnbondingHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAttestationRequestByNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAttestationRequestByNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAttestationRequestByNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAttestationRequestByNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAttestationRequestByNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAttestationRequestByNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attestation == nil {
				m.Attestation = &types.Any{}
			}
			if err := m.Attestation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestAttestationNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestAttestationNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestAttestationNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestAttestationNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestAttestationNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestAttestationNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValsetConfirmsByNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValsetConfirmsByNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValsetConfirmsByNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValsetConfirmsByNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValsetConfirmsByNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValsetConfirmsByNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Confirms = append(m.Confirms, MsgValsetConfirm{})
			if err := m.Confirms[len(m.Confirms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValsetConfirmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValsetConfirmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValsetConfirmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValsetConfirmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValsetConfirmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValsetConfirmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Confirm == nil {
				m.Confirm = &MsgValsetConfirm{}
			}
			if err := m.Confirm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastValsetRequestBeforeNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastValsetRequestBeforeNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastValsetRequestBeforeNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastValsetRequestBeforeNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastValsetRequestBeforeNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastValsetRequestBeforeNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Valset == nil {
				m.Valset = &Valset{}
			}
			if err := m.Valset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataCommitmentConfirmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataCommitmentConfirmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataCommitmentConfirmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginBlock", wireType)
			}
			m.BeginBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlock", wireType)
			}
			m.EndBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataCommitmentConfirmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataCommitmentConfirmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataCommitmentConfirmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Confirm == nil {
				m.Confirm = &MsgDataCommitmentConfirm{}
			}
			if err := m.Confirm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataCommitmentConfirmsByExactRangeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataCommitmentConfirmsByExactRangeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataCommitmentConfirmsByExactRangeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginBlock", wireType)
			}
			m.BeginBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlock", wireType)
			}
			m.EndBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataCommitmentConfirmsByExactRangeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataCommitmentConfirmsByExactRangeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataCommitmentConfirmsByExactRangeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Confirms = append(m.Confirms, MsgDataCommitmentConfirm{})
			if err := m.Confirms[len(m.Confirms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastUnbondingHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastUnbondingHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastUnbondingHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastUnbondingHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastUnbondingHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastUnbondingHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
